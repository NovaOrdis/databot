#!/bin/bash

#
# Command-line wrapper script - generated from Nova Ordis Release Tools' run-wrapper-template
#
# For more details see https://kb.novaordis.com/index.php/novaordis-release-tools
#

[ -f $(dirname $0)/os-stats.shlib ] && \
    . $(dirname $0)/os-stats.shlib || \
    { echo "[error]: required library file $(dirname $0)/os-stats.shlib not found, os-stats was most likely incorrectly installed" 1>&2; exit 1; }

main_class=io.novaordis.osstats.Main
memory=256m
verbose=false
os_stats_config_file_name="os-stats.conf"

function main() {

    local debug_args=""
    local output_settings=""
    local foreground=false
    local do_kill=false

    while [ "$1" != "" ]; do

        if [ "$1" = "help" -o "$1" = "--help" ]; then

            display-help;
            exit 0

        elif [ "$1" = "version" -o "$1" = "--version" ]; then

            display-version;
            exit 0

        elif [ "$1" = "-d" -o "$1" = "--debug" ]; then

            debug_args="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5011"
            verbose=true

        elif [ "$1" = "--verbose" -o "$1" = "-v" ]; then

            verbose=true

        elif [ "$1" = "--foreground" -o "$1" = "-fg" ]; then

            foreground=true
            #
            # also pass it as a java process argument, to let it know to ignore output.file
            #
            args="${args} $1"

        elif [ "$1" = "stop" ]; then

            stop && exit 0 || fail "failed to stop background os-stats"

        elif [ "$1" = "status" ]; then

            status && exit 0

        else

            #
            # if the argument contains spaces, it means double quotes were used, we need to pass those down so the java
            # command parsing line logic can detect quoted strings; more than that, if the double quoted string contains
            # escaped quotes, we want to pass them as such
            #
            if [ "$1" = "${1/ //}" ]; then
                # no spaces, pass as is
                args="${args} $1"
            else
                # quoted string that contains spaces, escape inner quotes, in case they exist
                escaped_inner_quotes=${1//\"/\\\"}
                args="${args} \"${escaped_inner_quotes}\""
            fi
        fi
        shift;
    done

    #
    # check if background processes are running on the system. If they do, report and exist, we only want a single
    # process on the VM
    #
    local pids
    pids=$(get-pids) || fail "failed to get pids"
    [ -n "${pids}" ] && fail "an os-stats process is already running (pid ${pids})"

    local java_home
    java_home=$(get-java-home) || fail "failed to get java home"

    local classpath
    classpath=$(get-classpath $(dirname $0)/..) || fail "failed to build os-stats classpath"

    local configuration_file
    configuration_file=$(get-configuration-file) || fail "failed to find configuration file"

    #
    # if jboss metrics are encountered in the configuration file, append the CLI classpath to the regular classpath
    #
    if configuration-file-contains-jboss-metric ${configuration_file}; then
        classpath=$(append-jboss-classpath-fragment ${classpath}) || \
        fail "os-stats configuration file ${configuration_file} contains jboss CLI metrics, but the required classpath cannot be built (see above)"
    fi

    local java_bin="java"
    [ "${java_home}" != "" ] && java_bin="${java_home}/bin/java"

    ${verbose} && verbose_system_property="-Dverbose=true"

    command="${java_bin} -Xms${memory} -Xmx${memory} -cp ${classpath} ${debug_args} ${output_settings} ${verbose_system_property} ${main_class} -c ${configuration_file} ${args}"

    ${verbose} && echo "${command}" 1>&2;

    if ${foreground}; then
        ${command}
    else
        ${command} &
    fi
}

main $@


